通过前面的简单介绍我们就可以基本确定原型模式的定义了。所谓原型模式就是用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。
      在原型模式中，所发动创建的对象通过请求原型对象来拷贝原型对象自己来实现创建过程，当然所发动创建的对象需要知道原型对象的类型。
      这里也就是说所发动创建的对象只需要知道原型对象的类型就可以获得更多的原型实例对象，至于这些原型对象时如何创建的根本不需要关心。
      讲到原型模式了，我们就不得不区分两个概念：深拷贝、浅拷贝。
      浅拷贝：使用一个已知实例对新创建实例的成员变量逐个赋值，这个方式被称为浅拷贝。
     深拷贝：当一个类的拷贝构造方法，不仅要复制对象的所有非引用成员变量值，还要为引用类型的成员变量创建新的实例，并且初始化为形式参数实例值。


  原型模式主要包含如下三个角色：
        Prototype：抽象原型类。声明克隆自身的接口。
        ConcretePrototype：具体原型类。实现克隆的具体操作。
        Client：客户类。让一个原型克隆自身，从而获得一个新的对象。
       我们都知道Object是祖宗，所有的Java类都继承至Object，而Object类提供了一个clone()方法，该方法可以将一个java对象复制一份，
       因此在java中可以直接使用clone()方法来复制一个对象。但是需要实现clone的Java类必须要实现一个接口:Cloneable.
       该接口表示该类能够复制且具体复制的能力，如果不实现该接口而直接调用clone()方法会抛出CloneNotSupportedException异常。如下：

       public class PrototypeDemo implements Cloneable{
       　　public Object clone(){
       　　　　Object object = null;
       　　　　try {
       　　　　　　object = super.clone();
       　　　　} catch (CloneNotSupportedException exception) {
       　　　　　　System.err.println("Not support cloneable");
       　　　　}
       　　　　return object;
           }
           ……
       }

             Java中任何实现了Cloneable接口的类都可以通过调用clone()方法来复制一份自身然后传给调用者。一般而言，clone()方法满足：
             (1) 对任何的对象x，都有x.clone() !=x，即克隆对象与原对象不是同一个对象。
             (2) 对任何的对象x，都有x.clone().getClass()==x.getClass()，即克隆对象与原对象的类型一样。
             (3) 如果对象x的equals()方法定义恰当，那么x.clone().equals(x)应该成立。